+-----------------------------------
  Producer consumer design pattern 
-----------------------------------+
new  x  ε N         -- number of executions
new  c  := 100 ε N  -- channel capacity
new  ch := [N](c)   -- define channel

--  ch is the communication channel
producer(ch ε [N]) => ()
  new item := 0 ε N;
  cycle
    stop if (len(ch) = c);
    let item  := random(10);
    let ch    += item
    yield consumer;  
  cycle;  
producer;

--  e is reference to number of executions
consumer(ch ε [N], e ε N ) => ()
  new item ε N;
  cycle
    stop if (len(ch) = 0);     
    let item := ch.deq; -- FIFO
    let e += 1;
    wait 30;   
    yield producer;
  cycle;  
consumer;

-- controller
new i := 0;
cycle
  -- produce on 4 threads   
  let i := 0;
  cycle
     run producer(q);
     stop if i := 8;
     let i += 1;      
  cycle;   
  let i := 0;
  -- consume on 8 threads  
  cycle
     run consumer(ch, x);
     stop if i := 8;
     let i += 1;
  cycle;  
  rest;
  stop if x >= 100000; 
cycle;

over.